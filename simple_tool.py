from ollama import chat, ChatResponse 

def add_two_numbers(a: int, b: int) -> int:
    """
    –°—É–º–º–∏—Ä—É–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    ARGS:
    a - int
    b - int
    """
    return a + b


TOOLS = {
    "add_two_numbers": add_two_numbers
}


messages = [{
    'role': 'user',
    'content': '–±–∞–Ω–∞–Ω —ç—Ç–æ 2. –û–ø–∏—à–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –±–∞–Ω–∞–Ω. –ú–æ–∂–Ω–æ –ª–∏ –∫ –±–∞–Ω–∞–Ω—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ tools? –ï—Å–ª–∏ –¥–∞, –≤—ã–∑–æ–≤–∏ tools –¥–ª—è –¥–≤—É—Ö –±–∞–Ω–∞–Ω–æ–≤.'
}]


response: ChatResponse = chat(
    model='qwen3:4b-q4_K_M',
    messages=messages,
    tools=[add_two_numbers],
    stream=True
)


for chunk in response:
    if chunk.message.content:
        print(chunk.message.content, end='', flush=True)

    if chunk.message.tool_calls:
        for call in chunk.message.tool_calls:
            func_name = call.function.name
            args = call.function.arguments
            print(f"\nüîß –ú–æ–¥–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å {func_name}({args})")

            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
            if func_name:
                print(TOOLS.get(func_name)(**args))
